<head>

    <title>Apollo</title>
    
    <meta id="settings" content="<%=settings%>"/>
    <meta content="<%=token%>"/>

</head>
  
<link rel="stylesheet" href="/style/cyberpunk.css">  
<link rel="stylesheet" href="/style/start.css">

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,700,1,0" />
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Major+Mono+Display&display=swap" rel="stylesheet">
<link rel="shrotcut icon" href="https://www.gitbook.com/cdn-cgi/image/width=40,height=40,fit=contain,dpr=1,format=auto/https%3A%2F%2F2736040151-files.gitbook.io%2F~%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FMlYPneLIcqHH1EOMSnny%252Ficon%252FR2CyiT04r15Bm7iCl3ij%252F%25D0%2591%25D0%25B5%25D0%25B7%2520%25D0%25BD%25D0%25B0%25D0%25B7%25D0%25B2%25D0%25B0%25D0%25BD%25D0%25B8%25D1%258F.jfif%3Falt%3Dmedia%26token%3Da1d0edc5-cfcc-4300-b1d6-d9712d23172d">
    
  
<section class="cyberpunk" id="main" style="height:200%">
      
    <a href="#">
        <span class="material-symbols-outlined" id="theme-id">nightlight</span>
    </a>
    
    <br/><br/>
    
    <a href="#">
        <span class="material-symbols-outlined" id="fullscreen">desktop_windows</span>
    </a>

    <br/><br/>

    <a href="/">
        <span class="material-symbols-outlined">home</span>
    </a>

    
    <div align="center">

        <h1 class="cyberpunk glitched futfont">Choose what you want to do</h1>
        <h3 class="cyberpunk futfont">You can discover all the available crypto specific features here</h3><br/><br/><br/>
   

    <label for="scope_selector" class="cyberpunk futfont" style="font-weight:bold;">
        Choose the scope
    </label><br/><br/>

    <select class="cyberpunk futfont land" id="scope_selector" style="max-width: 500px">

    <!-- SUPPORTED FORMATS WILL BE PASTED HERE  -->

    </select><br/><br/><br/><br/>

    
    <label for="operation_selector" class="cyberpunk futfont" style="font-weight:bold;">
        Choose operation
    </label><br/><br/>
    <select class="cyberpunk futfont land" id="operation_selector" style="max-width: 500px">

            <!-- SUPPORTED FORMATS WILL BE PASTED HERE  -->
    
    </select>
    
    <br/><br/><br/><br/>


    <label for="params" class="cyberpunk futfont" style="font-weight:bold;" id="params_label" hidden>
        Add parameters
    </label><br/><br/>
    <!-- <textarea class="cyberpunk" id="parameters" placeholder="paste parameters here..."></textarea>

    <br/><br/><br/> -->
    <div id="params">
    </div>

    <p class="futfont" style="font-weight:bold">Result(will be below):</p>

    <p style="font-weight:bold" id="result"></p>    <br/><br/><br/><br/>
  
    <button class="cyberpunk2077 blue-kly" onClick="letsDoIt()">Let's do it</button>

</div>
  
    <p style="bottom: 8%; left: 3%;" id="version">Apollo  v0.2.0</p>

  
  </section>
  
  <!--
  
  ███████╗ ██████╗██████╗ ██╗██████╗ ████████╗███████╗
  ██╔════╝██╔════╝██╔══██╗██║██╔══██╗╚══██╔══╝██╔════╝
  ███████╗██║     ██████╔╝██║██████╔╝   ██║   ███████╗
  ╚════██║██║     ██╔══██╗██║██╔═══╝    ██║   ╚════██║
  ███████║╚██████╗██║  ██║██║██║        ██║   ███████║
  ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝        ╚═╝   ╚══════╝
                                                       -->
  
<script src="/scripts/upitems.js"></script>
<script src="/scripts/no_self_xss.js"></script>

<script>

    //Create values for selectors with keytypes supported by Klyntar & Apollo

    let formats=[

        'klyntar',          'algorand',
        'arweave',          'binance_chain',
        'bitcoin',          'cosmos',
        'eos',              'eth_like',
        'filecoin',         'polkadot',
        'harmony',          'helium',
        'mina',             'xrp',
        'solana',           'stellar',
        'zilliqa',          'terra',
        'dfinity',          'kusama',
        'substrate format', 'ton'
    
    ]


    let cryptoland={

        encryption:{

            encrypt:async param=>{

                if(param==='prompt'){

                    let params=document.getElementById('params')

                    let privateKey=document.createElement('input')

                    privateKey.type="text"
                    privateKey.className="cyberpunk"
                    privateKey.placeholder="Your generated private key"
                    privateKey.id='privateKey'

                    let password=document.createElement('input')

                    password.type="text"
                    password.placeholder="Your password for AES-256"
                    password.className="cyberpunk"
                    password.id='password'

                    params.appendChild(privateKey)
                    params.appendChild(password)


                }else{
                          
                    //Logic after button clicked

                    let cipherTextPrivateKey=await fetch('/cryptoland',{
                        method:'POST',
                        body:JSON.stringify(
                            {
                                scope:'crypt',
                                operation:'encrypt',
                                params:`${document.getElementById('password').value}:${document.getElementById('privateKey').value}`
                            }
                        )

                    }).then(r=>r.text())
                                        
                    document.getElementById('result').innerHTML=cipherTextPrivateKey
                
                }
                 
            },
            decrypt:async param=>{


                if(param==='prompt'){

                    let params=document.getElementById('params')

                    let cipherTextOfPrivate=document.createElement('input')

                    cipherTextOfPrivate.type="text"
                    cipherTextOfPrivate.className="cyberpunk"
                    cipherTextOfPrivate.placeholder="Ciphertext of your private key"
                    cipherTextOfPrivate.id='cipherText'

                    let password=document.createElement('input')

                    password.type="text"
                    password.placeholder="Your password for AES-256"
                    password.className="cyberpunk"
                    password.id='password'

                    params.appendChild(cipherTextOfPrivate)
                    params.appendChild(password)


                }else{

                    //Logic after button clicked
                    let plainTextPrivateKey=await fetch('/cryptoland',{
                        method:'POST',
                        body:JSON.stringify(
                            {
                                scope:'crypt',
                                operation:'decrypt',
                                params:`${document.getElementById('password').value}:${document.getElementById('cipherText').value}`
                            }
                        )

                    }).then(r=>r.text())

                    document.getElementById('result').innerHTML=plainTextPrivateKey
                
                }
                

            }
        
        },

        default_signatures:{
            
            sign:async param=>{

                if(param==='prompt'){

                    let params=document.getElementById('params')


                    //Create field text to sign
                    let textToSign=document.createElement('input')

                    textToSign.type="text"
                    textToSign.className="cyberpunk"
                    textToSign.placeholder="Enter anything you want to sign"
                    textToSign.id='toSign'


                    //Create field for private key
                    let privateKey=document.createElement('input')

                    privateKey.type="text"
                    privateKey.placeholder="Your private key"
                    privateKey.className="cyberpunk"
                    privateKey.id='privateKey'


                    //To choose keytype for ValarDohaeris 
                    let availableKeys=document.createElement('select')
                    availableKeys.className="cyberpunk futfont"
                    availableKeys.id="key_selector"
                    availableKeys.style="max-width: 500px"
    
    
                    formats.forEach(format=>{

                        let newbiew=document.createElement('option')

                        newbiew.innerHTML=format

                        availableKeys.appendChild(newbiew)

                    })


                    //Finally add them to DOM
                    params.appendChild(textToSign)
                    params.appendChild(privateKey)
                    params.appendChild(availableKeys)

                }else{

                    //Logic after button clicked

                    let signa=await fetch('/cryptoland',{
                        method:'POST',
                        body:JSON.stringify(
                            {
                                scope:'default_signatures',
                                operation:'sign',
                                params:`${document.getElementById('toSign').value}:${ document.getElementById('privateKey').value}:${document.getElementById('key_selector').value}`
                            }
                        )

                    }).then(r=>r.text())

                    document.getElementById('result').innerHTML=signa
                
                }

            },
            verify:async param => {


                if(param==='prompt'){

                    let params=document.getElementById('params')


                    //Create field for signature to verify it
                    let signature=document.createElement('input')

                    signature.type="text"
                    signature.className="cyberpunk"
                    signature.placeholder="Enter signature you want to verify"
                    signature.id='signa'


                    //Create field for private key
                    let publicKey=document.createElement('input')

                    publicKey.type="text"
                    publicKey.placeholder="Public key / Address of signer"
                    publicKey.className="cyberpunk"
                    publicKey.id='publicKey'

                                        //Create field for private key
                    let plainText=document.createElement('input')

                    plainText.type="text"
                    plainText.placeholder="Text you want to verify"
                    plainText.className="cyberpunk"
                    plainText.id='plainText'

                    //To choose keytype for ValarDohaeris 
                    let availableKeys=document.createElement('select')
                    availableKeys.className="cyberpunk futfont"
                    availableKeys.id="key_selector"
                    availableKeys.style="max-width: 500px"
    
    
                    formats.forEach(format=>{

                        let newbiew=document.createElement('option')

                        newbiew.innerHTML=format

                        availableKeys.appendChild(newbiew)

                    })


                    //Finally add them to DOM
                    params.appendChild(signature)
                    params.appendChild(publicKey)
                    params.appendChild(plainText)
                    params.appendChild(availableKeys)

                }else{

                    //Logic after button clicked

                    let signa=await fetch('/cryptoland',{
                        method:'POST',
                        body:JSON.stringify(
                            {
                                scope:'default_signatures',
                                operation:'verify',
                                params:`${document.getElementById('plainText').value}:${ document.getElementById('publicKey').value}:${document.getElementById('key_selector').value}:${document.getElementById('signa').value}`
                            }
                        )

                    }).then(r=>r.text())

                    document.getElementById('result').innerHTML=signa
                
                }


            }
        
        },
        
        multisig:{
            
            generate:async param=>{

                if(param==='prompt') document.getElementById('params_label').innerHTML='no params needed,just press the button 🚀'

                else{

                    let pair=await fetch('/cryptoland',{
                        method:'POST',
                        body:JSON.stringify({

                            scope:'multisig',
                            operation:'generate'

                        })

                    }).then(r=>r.json())

                    document.getElementById('result').innerHTML=JSON.stringify(pair)

                }

            },
            sign:param=>{},
            verify:param=>{},
            aggregateSignatures:param=>{},
            aggregatePubKeys:param=>{},
        },
        
        ringsig:{
            
            generate:async param=>{

                if(param==='prompt') document.getElementById('params_label').innerHTML='no params needed,just press the button 🚀'
                else{

                    let pair=await fetch('/cryptoland',{
                        method:'POST',
                        body:JSON.stringify({

                            scope:'ringsig',
                            operation:'generate'

                        })

                    }).then(r=>r.json())

                    document.getElementById('result').innerHTML=JSON.stringify(pair)

                }

            },
            sign:param=>{},
            verify:param=>{},
            link:param=>{}
        },
        
        thresholdsig:{
            
            generate:async param=>{
                
                if(param==='prompt'){

                    document.getElementById('params_label').innerHTML='Add parameters'

                    let params=document.getElementById('params')

                    let threshold=document.createElement('input')

                    threshold.type="number"
                    threshold.className="cyberpunk"
                    threshold.placeholder="Threshold for t/n"
                    threshold.id="threshold"
                    threshold.min=1

                    let myId=document.createElement('input')

                    myId.type="text"
                    myId.placeholder="Your ID"
                    myId.className="cyberpunk"
                    myId.id="myId"


                    let idsArray=document.createElement('input')

                    idsArray.type="text"
                    idsArray.placeholder="IDs of other members. Example 1,2,3 or David,Nancy,Alex. Your ID also must be here"
                    idsArray.className="cyberpunk"
                    idsArray.id="idsArray"

                    let explainTip=document.createElement('label')
                    explainTip.className="cyberpunk futfont"
                    explainTip.for="idsArray"
                    explainTip.style="font-weight:bold;"

                    params.appendChild(threshold)
                    params.appendChild(myId)
                    params.appendChild(idsArray)
                    params.appendChild(explainTip)

                }
                else{

                    
                    let tblsCreds=await fetch('/cryptoland',{
                        
                        method:'POST',
                        body:JSON.stringify({

                            scope:'tsig',
                            operation:'generate',
                            params:`${document.getElementById('threshold').value}:${document.getElementById('myId').value}:${document.getElementById('idsArray').value}`

                        })

                    }).then(r=>r.json())

                    let result=document.getElementById('result')

                    result.innerHTML=JSON.stringify(tblsCreds)+'<br/><br/><br/><br/>'+'<span align="center" class="futfont">Send this to all other members:</span>'+'<br/><br/>'+`${JSON.stringify(tblsCreds.verificationVector)}`+'<br/><br/><br/>'


                    //Log shares to share among other sides
                    result.innerHTML+=`<br/><br/><span class="futfont">Your shares:</span><br/><br/>  <ul>`


                    let ids=document.getElementById('idsArray').value.split(',')

                    tblsCreds.secretShares.forEach((share,index)=>{

                        result.innerHTML+=`<li>For user with id ${ids[index]} => ${share}`+'</li>'
                        
                    })

                    result.innerHTML+=`</ul><br/><span class="futfont">Your new id: </span>${tblsCreds.id}<br/><br/>`

                }

            },
            verifyShare:param=>{},
            deriveGroupPub:param=>{},
            signaShare:param=>{},
            buildFullSignature:param=>{},
            verify:param=>{}
        },
        
        post_quantum:{
            
            generate:async param=>{
           
                if(param==='prompt') document.getElementById('params_label').innerHTML='no params needed,just press the button 🚀'
                else{

                    let pair=await fetch('/cryptoland/pqc/generate/{TYPE}').then(r=>r.json())

                    document.getElementById('result').innerHTML=JSON.stringify(pair)

                }

           
            },
            sign:param=>{},
            verify:param=>{}
        }
    
    }


    //Fill the selectors
    let scopeSelector=document.getElementById('scope_selector')

    let operationSelector=document.getElementById('operation_selector')


    // SET PROMPT
    let newbiew=document.createElement('option')

    newbiew.value=""
    newbiew.disabled=true
    newbiew.selected=true
    newbiew.hidden=true
    newbiew.innerHTML='Press here'

    scopeSelector.appendChild(newbiew)
//___________________________________________


    //FIll the selector to allow you to choose everything you need
    Object.keys(cryptoland).forEach(scope=>{

        let newbiew=document.createElement('option')

        newbiew.innerHTML=scope

        scopeSelector.appendChild(newbiew)


    })


    //Set handler for change events of scope
    document.getElementById('scope_selector').addEventListener('change',()=>{

        document.getElementById('params_label').hidden=true

        //Get the value of scope
        let scopeSelectorValue=document.getElementById('scope_selector').value

        //Get node to fill it
        let operationSelector=document.getElementById('operation_selector')

        
        operationSelector.replaceChildren()

        // SET PROMPT
        let newbiew=document.createElement('option')

        newbiew.value=""
        newbiew.disabled=true
        newbiew.selected=true
        newbiew.hidden=true
        newbiew.innerHTML='now choose operation'

        operationSelector.appendChild(newbiew)
        //___________________________________________

        //FIll the selector to allow you to choose everything you need
        Object.keys(cryptoland[scopeSelectorValue]).forEach(func=>{

            let newbiew=document.createElement('option')

            newbiew.innerHTML=func

            operationSelector.appendChild(newbiew)

        })


    })


    //Set handler to change events of scope
    document.getElementById('operation_selector').addEventListener('change',()=>{

        document.getElementById('params_label').hidden=true

        document.getElementById('params').replaceChildren()

        //Get the value of scope
        let scopeSelectorValue=document.getElementById('scope_selector').value

        //Get the operation
        let operationSelector=document.getElementById('operation_selector').value

        cryptoland[scopeSelectorValue][operationSelector]('prompt')

        document.getElementById('params_label').hidden = false

    })


    let letsDoIt=()=>{
      
        //Get the value of scope
        let scopeSelectorValue=document.getElementById('scope_selector').value

        //Get the operation
        let operationSelector=document.getElementById('operation_selector').value

        cryptoland[scopeSelectorValue][operationSelector]()
        
    }
    


</script>